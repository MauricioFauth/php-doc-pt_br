<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: d76a7fe17dd2488e47d664a8ab38e161b13ac843 Maintainer: leonardolara Status: ready --><!-- CREDITS: leonardolara -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.crypt">
 <refnamediv>
  <refname>crypt</refname>
  <refpurpose>Hash unidirecional de string</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  &note.not-bin-safe;
 </refsynopsisdiv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>crypt</methodname>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>string</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>crypt</function> retorna uma string com hash usando o
   algorimo padrão do Unix baseado em <abbrev>DES</abbrev> ou
   algortimos alternativos. <function>password_verify</function> é
   compatível com <function>crypt</function>. Portanto, hashes de
   senhas criados por <function>crypt</function> podem ser usados com
   <function>password_verify</function>.
  </para>
  <para>
   Antes do PHP 8.0.0, o parâmetro <parameter>salt</parameter> era opcional. Entretanto, <function>crypt</function> criava um hash fraco sem <parameter>salt</parameter> e emitia um erro do tipo <constant>E_NOTICE</constant>. Certifique-se de especificar um sal forte o suficiente para uma melhor segurança de dados.
  </para>
  <para>
   <function>password_hash</function> usa um hash forte, gera um sal forte e aplica arredondamentos apropriados automaticamente. <function>password_hash</function> é um empacotador simples de <function>crypt</function> e compatível com hashes de senhas existentes. O uso de <function>password_hash</function> é encorajado.
  </para>
  <para>
   O tipo de hash é disparado pelo argumento salt (sal).
   Se nenhum sal for fornecido, o PHP irá
   gerar automaticamente um sal padrão de 2 caracteres (DES) ou de
   12 caracteres (MD5), dependendo da disponibilidade de crypt() MD5. O PHP define uma
   constante de nome <constant>CRYPT_SALT_LENGTH</constant> que indica o
   comprimento máximo de sal permitido pelos hashes disponíveis.
  </para>
  <para>
   A função <function>crypt</function> padrão baseada em DES retorna o
   sal como os 2 primeiros caracteres da saída. Ela também somente usa os
   primeiros 8 caracteres da <parameter>string</parameter>, portanto strings mais longas
   que começam com os mesmos 8 caracteres irão gerar o mesmo resultado
   (quando o mesmo sal é usado).
  </para>
  <simpara>
   Os seguintes tipos de hash são suportados:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <constant>CRYPT_STD_DES</constant> - Hash padrão baseado em DES com sal de 2 caracteres
       do conjunto "./0-9A-Za-z". Usar caracteres inválidos no sal irá causar falha
       na função crypt().
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_EXT_DES</constant> - Hash estendido baseado em DEX. O "sal" é uma
     string de 9 caracteres que consiste de um "_" seguido por 4 caracteres de contagem de iteração
     e 4 caracteres de sal. Cada string de 4 caracteres é codificada em 24 bits, os caracteres
     menos significativos primeiro. Os valores <literal>0</literal> a <literal>63</literal> são codificados como
     <literal>./0-9A-Za-z</literal>. Usar caracteres inválidos no sal irá causar falha na função crypt().
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_MD5</constant> - Hash MD5 com sal de 12 caracteres iniciando com
     $1$
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_BLOWFISH</constant> - Hash Blowfish com o sal desta
     forma: "$2a$", "$2x$" ou "$2y$", um parâmetro de custo de 2 dígitos, "$", e
     22 caracteres do conjunto "./0-9A-Za-z". Usar caracteres fora deste
     conjunto no sal fará com que crypt() retorne uma string de comprimento zero.
     O parâmetro de custo de 2 dígitos é o logaritmo base 2 da contagem de
     iteração para o algortimo de hash baseado em Blowfish subjacente e precisa estar
     no intervalo 04-31. Valores fora deste intervalo causarão falha na função crypt().
     Hashes "$2x$" são potencialmente fracas; hashes "$2a$" são compatíveis e
     mitigam esta fraqueza. Para novas hashes, "$2y$" deve ser usada.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA256</constant> - Hash SHA-256 com sal de 16 caracteres
     prefixados com $5$. Se a string do sal iniciar com 'rounds=&lt;N&gt;$', o valor numérico de N
     é usado para indicar quantas rodadas do hash devem ser executadas, bem parecido com
     o parâmetro de custo do Blowfish. O número padrão de rodadas é 5000, existe um mínimo de
     1.000 e um máximo de 999.999.999. Qualquer seleção de N fora deste intervalo será truncado ao
     limite mais próximo.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA512</constant> - Hash SHA-512 com sal de 16 caracteres
     prefixados com $6$. Se a string do sal iniciar com 'rounds=&lt;N&gt;$', o valor numérico de N
     é usado para indicar quantas rodadas do hash devem ser executadas, bem parecido com
     o parâmetro de custo do Blowfish. O número padrão de rodadas é 5000, existe um mínimo de
     1.000 e um máximo de 999.999.999. Qualquer seleção de N fora deste intervalo será truncado ao
     limite mais próximo.
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       A string cujo hash será calculado.
      </para>
      <caution>
       <para>
        Usar o algortimo <constant>CRYPT_BLOWFISH</constant> fará com que
        o parâmetro <parameter>string</parameter> seja truncado para um
        comprimento máximo de 72 bytes.
       </para>
      </caution>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       Uma string de sal para servir como base para a operação de hash. Se não fornecido,
       o comportamento é definido pela implementação do algoritmo e pode levar a
       resultados inesperados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna o hash da string ou uma string mais curta que 13 caracteres
   que seja garantidamente diferente do sal em caso de falha.
  </para>
  <warning>
   <simpara>
    Ao validar senhas, uma função de comparação de strings que não seja
    vulnerável a ataques de temporização deve ser usada para comparar a saída de
    <function>crypt</function> ao hash conhecido anteriormente. O PHP
    fornece a função <function>hash_equals</function> para este propósito.
   </simpara>
  </warning>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.0.0</entry>
      <entry>
       O parâmetro <parameter>salt</parameter> não é mais opcional.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Exemplos de <function>crypt</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$user_input = 'rasmuslerdorf';
$hashed_password = '$6$rounds=1000000$NJy4rIPjpOaU$0ACEYGg/aKCY3v8O8AfyiO7CTfZQ8/W231Qfh2tRLmfdvFD6XfHk12u6hMr9cYIA4hnpjLNSTRtUwYr9km9Ij/';

// Valida um hash existente criado por crypt() de forma compatível com software não-PHP.
if (hash_equals($hashed_password, crypt($user_input, $hashed_password))) {
   echo "Senha verificada!";
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    Não existe função de descriptografia, já que <function>crypt</function> usa um
    algoritmo unidirecional.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>hash_equals</function></member>
    <member><function>password_hash</function></member>
    <member>A página do manual Unix para a função crypt() para mais informação</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
